@page "/exercises"
@using PersonFit.Frontend.WebAssembly.HttpClients.Exercise
@using Microsoft.AspNetCore.Components
@inject IExerciseService Http

<PageTitle>Avaiable Exercises</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Avaiable Exercises</MudText>
<MudText Class="mb-8">Your avaiable exercies</MudText>
@if (_exercises == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable  @ref="@_table" Items="_exercises" Hover="true" RowsPerPage="20" SortLabel="Sort By" Elevation="0" Filter="new Func<Exercise,bool>(FilterFunc1)" @bind-SelectedItem="_selectedItem1">
        <ColGroup>
            <col style="width:300px;" />
            <col style="width:100px;" />
            <col />>
        </ColGroup>
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Exercise, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Exercise, object>(x=>x.Tags)">Tags</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                <MudButton @ref="@_detailedButton" 
                           Variant="Variant.Outlined" 
                           Size="Size.Small"
                           OnClick="@(() => ShowBtnPress(context.Id))">@(context.HasDetails ? "Hide" : "Show") details
                </MudButton>
            </MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Tags">@context.Tags</MudTd>
        </RowTemplate>
        <ChildRowContent>
        @if (context.HasDetails)
        {
              <MudTr>
               <td colspan="2">
        	    <MudCard Elevation="0">
        	     <MudCardHeader>
        	      <CardHeaderContent>
        	       <MudText Typo="Typo.body1">Address Details for <strong>@context.Name</strong></MudText>
        	      </CardHeaderContent>
        	     </MudCardHeader>
        	     <MudCardContent Class="pa-0">
        	      <MudTable Items="@context.Full.Contents" Context="FullExerciseContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                      <RowTemplate>
                          <Mudtd>
                              @if (FullExerciseContext.Type == "video")
                              {
                                  <BlazoredVideo
                                                 class="w-100"
                                                 style="max-width:800px;"
                                                 controls="controls">
                                      <source src="@FullExerciseContext.Url" type="video/mp4" />
                                  </BlazoredVideo>
                              }
                              else
                              {
                                  <MudImage Src="@FullExerciseContext.Url" Elevation="25" Class="rounded-lg"/>
                              }
                          </Mudtd>
                      </RowTemplate>
                  </MudTable>
        	     </MudCardContent>
        	    </MudCard>
               </td>
              </MudTr>
        	}
        </ChildRowContent>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <div class="d-flex flex-column align-end align-content-start align-content-space-between">
                <MudPagination HorizontalAlignment="HorizontalAlignment.Center"
                               SelectedChanged="PageChanged"
                               hidden="@HidePager()"
                               Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)"/>
                <MudText Class="mt-2"  hidden="@HidePager()">Total records: @_table.GetFilteredItemsCount()</MudText> 
            </div>
        </PagerContent>
    </MudTable>
}

@code {
    private Exercise[] _exercises;
    private MudTable<Exercise> _table;
    private string _searchString1 = string.Empty;
    private Exercise _selectedItem1 = null;
    private MudButton _detailedButton;
    private ExerciseFull _exerciseFull;
    
    public record Exercise(Guid Id, string Name, string Tags, bool HasDetails)
    {
        public ExerciseFull Full { get; private set; } = ExerciseFull.Default;
        public bool HasDetails { get; set; }
    
        public static Exercise Map(ExerciseDto dto) => new(dto.Id, dto.Name, string.Join(", ", dto.Tags), false);

        public void AddFull(IEnumerable<ExerciseSummaryContent> contents)
        {
            Full = new ExerciseFull(Id, Name, Tags, contents);
        }
    }

    public record ExerciseFull(Guid Id, string Name, string Tags, IEnumerable<ExerciseSummaryContent> Contents)
    {
        public static readonly ExerciseFull Default = new(Guid.Empty, string.Empty, string.Empty, ArraySegment<ExerciseSummaryContent>.Empty);
    }

  
    protected override async Task OnInitializedAsync()
    {
        var dto = await Http.Get();
        {
            _exercises = dto.Select(Exercise.Map).ToArray();
        }
    }

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }

    private bool FilterFunc1(Exercise element) => FilterFunc(element, _searchString1);

    private bool FilterFunc(Exercise element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        return element.Tags.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

    private bool HidePager()
        => _exercises.Count() <= _table.RowsPerPage;

    private async Task ShowBtnPress(Guid id)
    {
        var exercise = _exercises.Single(e => e.Id == id);
        if (!exercise.HasDetails && exercise.Full == ExerciseFull.Default)
        {
            var dto = await Http.Get(id);
            {
                exercise.AddFull(dto.Contents);
            }
        }
        exercise.HasDetails = !exercise.HasDetails;
    }
}